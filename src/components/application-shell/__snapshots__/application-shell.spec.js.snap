// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<RestrictedApplication> rendering should match layout structure 1`] = `
<RestrictedInnerApplication
  INTERNAL__isApplicationFallback={false}
  configuration={Object {}}
  i18n={
    Object {
      "de": Object {
        "title": "Titel",
      },
      "en": Object {
        "title": "Title en",
      },
      "en-US": Object {
        "title": "Title",
      },
    }
  }
  isLoading={false}
  loadI18n={[MockFunction]}
  locale="en-US"
  mapPluginNotificationToComponent={[MockFunction]}
  messages={
    Object {
      "title": "Title en",
    }
  }
  notificationsByDomain={
    Object {
      "global": Array [],
      "page": Array [],
      "side": Array [],
    }
  }
  onRegisterErrorListeners={[MockFunction]}
  render={[MockFunction]}
  showApiErrorNotification={[MockFunction]}
  showNotification={[MockFunction]}
  showUnexpectedErrorNotification={[MockFunction]}
  trackingEventWhitelist={Object {}}
  user={
    Object {
      "email": "john.snow@got.com",
      "firstName": "John",
      "gravatarHash": "20c9c1b252b46ab49d6f7a4cee9c3e68",
      "id": "u1",
      "language": "en-US",
      "lastName": "Snow",
      "launchdarklyTrackingGroup": "ct",
      "launchdarklyTrackingId": "123",
      "launchdarklyTrackingTeam": Array [
        "abc",
        "def",
      ],
      "projects": Object {
        "total": 0,
      },
    }
  }
/>
`;

exports[`<RestrictedInnerApplication rendering project container <Route> should match layout structure 1`] = `
<React.Fragment>
  <withReconfiguration(ReconfigureAdapter)
    user={
      Object {
        "custom": Object {
          "project": "foo-1",
        },
      }
    }
  />
  <InjectIntl(ProjectContainer)
    isLoadingUser={false}
    location={
      Object {
        "pathname": "/test-project/products",
      }
    }
    match={
      Object {
        "params": Object {
          "projectKey": "foo-1",
        },
      }
    }
    render={[MockFunction]}
    user={
      Object {
        "email": "john.snow@got.com",
        "firstName": "John",
        "gravatarHash": "20c9c1b252b46ab49d6f7a4cee9c3e68",
        "id": "u1",
        "language": "en-US",
        "lastName": "Snow",
        "launchdarklyTrackingGroup": "ct",
        "launchdarklyTrackingId": "123",
        "launchdarklyTrackingTeam": Array [
          "abc",
          "def",
        ],
        "projects": Object {
          "total": 0,
        },
      }
    }
  />
</React.Fragment>
`;

exports[`<RestrictedInnerApplication rendering should match layout structure 1`] = `
<ConfigureIntlProvider
  locale="en-US"
  messages={
    Object {
      "title": "Test en",
    }
  }
>
  <SetupFlopFlipProvider
    user={
      Object {
        "email": "john.snow@got.com",
        "firstName": "John",
        "gravatarHash": "20c9c1b252b46ab49d6f7a4cee9c3e68",
        "id": "u1",
        "language": "en-US",
        "lastName": "Snow",
        "launchdarklyTrackingGroup": "ct",
        "launchdarklyTrackingId": "123",
        "launchdarklyTrackingTeam": Array [
          "abc",
          "def",
        ],
        "projects": Object {
          "total": 0,
        },
      }
    }
  >
    <React.Fragment>
      <Connect(RequestsInFlightLoader) />
      <SentryUserTracker
        user={
          Object {
            "email": "john.snow@got.com",
            "firstName": "John",
            "gravatarHash": "20c9c1b252b46ab49d6f7a4cee9c3e68",
            "id": "u1",
            "language": "en-US",
            "lastName": "Snow",
            "launchdarklyTrackingGroup": "ct",
            "launchdarklyTrackingId": "123",
            "launchdarklyTrackingTeam": Array [
              "abc",
              "def",
            ],
            "projects": Object {
              "total": 0,
            },
          }
        }
      />
      <GtmUserTracker
        user={
          Object {
            "email": "john.snow@got.com",
            "firstName": "John",
            "gravatarHash": "20c9c1b252b46ab49d6f7a4cee9c3e68",
            "id": "u1",
            "language": "en-US",
            "lastName": "Snow",
            "launchdarklyTrackingGroup": "ct",
            "launchdarklyTrackingId": "123",
            "launchdarklyTrackingTeam": Array [
              "abc",
              "def",
            ],
            "projects": Object {
              "total": 0,
            },
          }
        }
      />
      <div
        className="app-layout"
      >
        <div
          className="global-notifications"
        >
          <NotificationsList
            domain="global"
          />
        </div>
        <header>
          <AppBar
            user={
              Object {
                "email": "john.snow@got.com",
                "firstName": "John",
                "gravatarHash": "20c9c1b252b46ab49d6f7a4cee9c3e68",
                "id": "u1",
                "language": "en-US",
                "lastName": "Snow",
                "launchdarklyTrackingGroup": "ct",
                "launchdarklyTrackingId": "123",
                "launchdarklyTrackingTeam": Array [
                  "abc",
                  "def",
                ],
                "projects": Object {
                  "total": 0,
                },
              }
            }
          />
        </header>
        <aside>
          <WithProjectKey
            render={[Function]}
            user={
              Object {
                "email": "john.snow@got.com",
                "firstName": "John",
                "gravatarHash": "20c9c1b252b46ab49d6f7a4cee9c3e68",
                "id": "u1",
                "language": "en-US",
                "lastName": "Snow",
                "launchdarklyTrackingGroup": "ct",
                "launchdarklyTrackingId": "123",
                "launchdarklyTrackingTeam": Array [
                  "abc",
                  "def",
                ],
                "projects": Object {
                  "total": 0,
                },
              }
            }
          />
        </aside>
        <div
          className="main"
          role="main"
        >
          <PortalsContainer />
          <NotificationsList
            domain="page"
          />
          <NotificationsList
            domain="side"
          />
          <div
            className="content"
          >
            <Switch>
              <Redirect
                from="/profile"
                push={false}
                to="/account/profile"
              />
              <Route
                path="/account"
                render={[MockFunction]}
              />
              <Route
                exact={true}
                path="/:projectKey"
                render={[Function]}
              />
              <Route
                exact={true}
                path="/"
                render={[Function]}
              />
              <Route
                exact={false}
                path="/:projectKey"
                render={[Function]}
              />
            </Switch>
          </div>
        </div>
      </div>
    </React.Fragment>
  </SetupFlopFlipProvider>
</ConfigureIntlProvider>
`;

exports[`<UnrestrictedApplication> rendering should match layout structure 1`] = `
<Switch>
  <Route
    component={[Function]}
    path="/login/sso/callback"
  />
  <Route
    component={[Function]}
    path="/login/sso"
  />
  <Route
    component={[Function]}
    path="/login/locked"
  />
  <Route
    component={[Function]}
    path="/login"
  />
  <Route
    render={[Function]}
  />
</Switch>
`;
