// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<RestrictedApplication> rendering project container <Route> should match layout structure 1`] = `
<div>
  <ConfigureIntlProvider
    locale="en-US"
    messages={
      Object {
        "title": "Title en",
      }
    }
  >
    <SetupFlopFlipProvider
      user={
        Object {
          "availableProjects": Array [],
          "email": "john.snow@got.com",
          "firstName": "John",
          "id": "u1",
          "language": "en-US",
          "lastName": "Snow",
        }
      }
    >
      <React.Fragment>
        <Connect(RequestsInFlightLoader) />
        <IntercomBooter
          showNotification={[MockFunction]}
        />
        <SentryUserTracker
          user={
            Object {
              "availableProjects": Array [],
              "email": "john.snow@got.com",
              "firstName": "John",
              "id": "u1",
              "language": "en-US",
              "lastName": "Snow",
            }
          }
        />
        <GtmUserTracker
          user={
            Object {
              "availableProjects": Array [],
              "email": "john.snow@got.com",
              "firstName": "John",
              "id": "u1",
              "language": "en-US",
              "lastName": "Snow",
            }
          }
        />
        <branch(IntercomUserTracker)
          user={
            Object {
              "availableProjects": Array [],
              "email": "john.snow@got.com",
              "firstName": "John",
              "id": "u1",
              "language": "en-US",
              "lastName": "Snow",
            }
          }
        />
        <div
          className="app-layout"
        >
          <div
            className="global-notifications"
          >
            <NotificationsList
              domain="global"
              mapPluginNotificationToComponent={[MockFunction]}
              notifications={Array []}
              showUnexpectedErrorNotification={[MockFunction]}
            />
          </div>
          <header>
            <AppBar
              user={
                Object {
                  "availableProjects": Array [],
                  "email": "john.snow@got.com",
                  "firstName": "John",
                  "id": "u1",
                  "language": "en-US",
                  "lastName": "Snow",
                }
              }
            />
          </header>
          <aside>
            <WithProjectKey
              render={[Function]}
              user={
                Object {
                  "availableProjects": Array [],
                  "email": "john.snow@got.com",
                  "firstName": "John",
                  "id": "u1",
                  "language": "en-US",
                  "lastName": "Snow",
                }
              }
            />
          </aside>
          <div
            className="main"
            role="main"
          >
            <PortalsContainer />
            <NotificationsList
              domain="page"
              mapPluginNotificationToComponent={[MockFunction]}
              notifications={Array []}
            />
            <NotificationsList
              domain="side"
              mapPluginNotificationToComponent={[MockFunction]}
              notifications={Array []}
            />
            <div
              className="content"
            >
              <Switch>
                <Redirect
                  from="/profile"
                  push={false}
                  to="/account/profile"
                />
                <Route
                  path="/account"
                  render={[Function]}
                />
                <Route
                  exact={true}
                  path="/:projectKey"
                  render={[Function]}
                />
                <Route
                  exact={true}
                  path="/"
                  render={[Function]}
                />
                <Route
                  exact={false}
                  path="/:projectKey"
                  render={[Function]}
                />
              </Switch>
            </div>
          </div>
        </div>
      </React.Fragment>
    </SetupFlopFlipProvider>
  </ConfigureIntlProvider>
</div>
`;

exports[`<RestrictedApplication> rendering should match layout structure 1`] = `
<div>
  <ConfigureIntlProvider
    locale="en-US"
    messages={
      Object {
        "title": "Title en",
      }
    }
  >
    <SetupFlopFlipProvider
      user={
        Object {
          "availableProjects": Array [],
          "email": "john.snow@got.com",
          "firstName": "John",
          "id": "u1",
          "language": "en-US",
          "lastName": "Snow",
        }
      }
    >
      <React.Fragment>
        <Connect(RequestsInFlightLoader) />
        <IntercomBooter
          showNotification={[MockFunction]}
        />
        <SentryUserTracker
          user={
            Object {
              "availableProjects": Array [],
              "email": "john.snow@got.com",
              "firstName": "John",
              "id": "u1",
              "language": "en-US",
              "lastName": "Snow",
            }
          }
        />
        <GtmUserTracker
          user={
            Object {
              "availableProjects": Array [],
              "email": "john.snow@got.com",
              "firstName": "John",
              "id": "u1",
              "language": "en-US",
              "lastName": "Snow",
            }
          }
        />
        <branch(IntercomUserTracker)
          user={
            Object {
              "availableProjects": Array [],
              "email": "john.snow@got.com",
              "firstName": "John",
              "id": "u1",
              "language": "en-US",
              "lastName": "Snow",
            }
          }
        />
        <div
          className="app-layout"
        >
          <div
            className="global-notifications"
          >
            <NotificationsList
              domain="global"
              mapPluginNotificationToComponent={[MockFunction]}
              notifications={Array []}
              showUnexpectedErrorNotification={[MockFunction]}
            />
          </div>
          <header>
            <AppBar
              user={
                Object {
                  "availableProjects": Array [],
                  "email": "john.snow@got.com",
                  "firstName": "John",
                  "id": "u1",
                  "language": "en-US",
                  "lastName": "Snow",
                }
              }
            />
          </header>
          <aside>
            <WithProjectKey
              render={[Function]}
              user={
                Object {
                  "availableProjects": Array [],
                  "email": "john.snow@got.com",
                  "firstName": "John",
                  "id": "u1",
                  "language": "en-US",
                  "lastName": "Snow",
                }
              }
            />
          </aside>
          <div
            className="main"
            role="main"
          >
            <PortalsContainer />
            <NotificationsList
              domain="page"
              mapPluginNotificationToComponent={[MockFunction]}
              notifications={Array []}
            />
            <NotificationsList
              domain="side"
              mapPluginNotificationToComponent={[MockFunction]}
              notifications={Array []}
            />
            <div
              className="content"
            >
              <Switch>
                <Redirect
                  from="/profile"
                  push={false}
                  to="/account/profile"
                />
                <Route
                  path="/account"
                  render={[Function]}
                />
                <Route
                  exact={true}
                  path="/:projectKey"
                  render={[Function]}
                />
                <Route
                  exact={true}
                  path="/"
                  render={[Function]}
                />
                <Route
                  exact={false}
                  path="/:projectKey"
                  render={[Function]}
                />
              </Switch>
            </div>
          </div>
        </div>
      </React.Fragment>
    </SetupFlopFlipProvider>
  </ConfigureIntlProvider>
</div>
`;

exports[`<UnrestrictedApplication> rendering should match layout structure 1`] = `
<Switch>
  <Route
    component={[Function]}
    path="/login/sso/callback"
  />
  <Route
    component={[Function]}
    path="/login/sso"
  />
  <Route
    component={[Function]}
    path="/login/locked"
  />
  <Route
    component={[Function]}
    path="/login"
  />
  <Route
    render={[Function]}
  />
</Switch>
`;
